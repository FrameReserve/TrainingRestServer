<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
        
    <!-- Spring MVC 注解扫描 -->
    <context:component-scan base-package="com.training" />
        <!--<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>-->
    <!--</context:component-scan>-->
    <!--<aop:aspectj-autoproxy/>-->

	<!-- alibaba  druid 连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="jdbc:mysql://192.168.2.63:3306/training?useUnicode=true&amp;characterEncoding=UTF-8&amp;emptyStringsConvertToZero=true&amp;jdbcCompliantTruncation=false&amp;noDatetimeStringSync=true&amp;nullCatalogMeansCurrent=true&amp;nullNamePatternMatchesAll=true&amp;transformedBitIsBoolean=false&amp;dontTrackOpenResources=true&amp;zeroDateTimeBehavior=convertToNull&amp;useServerPrepStmts=false&amp;autoClosePStmtStreams=true&amp;processEscapeCodesForPrepStmts=false&amp;useFastDateParsing=false&amp;populateInsertRowWithDefaultValues=false&amp;useDirectRowUnpack=false" />
        <property name="username" value="root" />
        <property name="password" value="123" />

        <property name="filters" value="stat" />

        <property name="maxActive" value="20" />
        <property name="initialSize" value="1" />
        <property name="maxWait" value="60000" />
        <property name="minIdle" value="1" />

        <property name="timeBetweenEvictionRunsMillis" value="3600000" />
        <property name="minEvictableIdleTimeMillis" value="3600000" />

        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="50" />
    </bean>
    
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--<bean id="aspcejHandler" class="com.training.core.aop.LogAspect"/>-->

    <bean id="sessionFactory" class="com.training.core.configuration.TrainingSqlSessionFactoryBean">
        <property name="configLocation" value="classpath:myBatisConfig.xml"></property>
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.training.**.mapper"/>
        <property name="properties">
            <value>
                tk.mybatis.mapper.common.Mapper
            </value>
        </property>
    </bean>

    <tx:advice id="txAdvice" transaction-manager="transactionManager" >
        <tx:attributes>
            <!-- propagation为事务传播属性 -->
            <tx:method name="*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
        </tx:attributes>
    </tx:advice>

    <!-- 配置切面 -->
    <!-- proxy-target-class=如果为true则使用cglib为目标对象创建代理,否则会使用jdk的动态代理（使用jdk的动态代理必须实现某个接口） -->
    <!-- JDK动态代理：其代理对象必须是某个接口的实现，它是通过在运行期间创建一个接口的实现类来完成对目标对象的代理 -->
    <!-- CGLIB代理：实现原理类似于JDK动态代理，只是它在运行期间生成的代理对象是针对目标类扩展的子类 -->
    <!-- 如只针对Dao或service进行代理，也可以把 proxy-target-class="true"去掉-->
    <aop:config proxy-target-class="true">
        <!-- 那些类的哪些方法参与事务 -->
        <!-- 第一个*通配 任意返回值类型 -->
        <!-- 第二个*通配 包com.thesys下（包括子包）的任意类名以Action结尾的class -->
        <!-- 第三个*通配 包com.thesys下（包括子包）的任意Action类的任意method -->
        <!-- 第四个 .. 通配 方法可以有0个或多个参数 -->
        <aop:pointcut id="allAOPMethod" expression="execution(* com.training.*Controller.*(..))
			or execution(* com.training.*Service.*(..)) or execution(* com.training.*Manager.*(..))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="allAOPMethod" order="2"/>

    </aop:config>

    <!-- 开启注解事务 -->
    <tx:annotation-driven  transaction-manager="transactionManager" proxy-target-class="false" />
</beans>